--- XFree86-3.3.6/xc/config/cf/xfree86.cf.810	Tue Mar 14 23:08:19 2000
+++ XFree86-3.3.6/xc/config/cf/xfree86.cf	Tue Mar 14 23:08:19 2000
@@ -437,7 +437,7 @@ XCOMM $XConsortium: xfree86.cf /main/34 
 				cirrus ncr77c22 compaq mga oak al2101 \
 				ali cl64xx video7 ark mx realtek s3_savage s3v apm \
 				s3_svga neo chips cyrix rendition p9x00 \
-				spc8110 i740 tdfx smi generic
+				spc8110 i740 tdfx i810 smi generic
 #  else
 #   define XF86SvgaDrivers	nv et4000 et3000 pvga1 gvga r128 ati sis tvga8900 \
 				cirrus ncr77c22 compaq mga oak al2101 \
--- XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/doc/Imakefile.810	Fri Dec  3 01:42:28 1999
+++ XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/doc/Imakefile	Tue Mar 14 23:08:19 2000
@@ -90,7 +90,7 @@ HWREADME =  README.ati README.trident RE
             README.I128 README.Mach32 \
             README.Mach64 README.ark README.MGA README.NVIDIA README.mouse \
 	    README.neo README.rendition README.3DLabs README.cyrix \
-	    README.i740 README.r128
+	    README.i740 README.r128 README.i810
 
 MAINDOCS = COPYRIGHT README README.Config BUILD RELNOTES
 
--- XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810_memory.c.810	Thu Nov 18 11:22:48 1999
+++ XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810_memory.c	Wed Mar 15 10:16:12 2000
@@ -54,343 +54,192 @@ extern vgaPCIInformation *vgaPCIInfo;
 #include "i810.h"
 #include "i810_reg.h"
 
-#include <agpgart.h>
+#include <linux/agpgart.h>
 
 /* DcachePtr will be set up, but not used. 
  */
 I810MemRange I810DcacheMem = { 0, 0, 0 };
 I810MemRange I810SysMem = { 0, 0, 0 };
-I810MemRange *I810DisplayPtr = &I810SysMem;
-
-
-#define gtt_None         0
-#define gtt_Local        1
-#define gtt_Kernel       2
-
-
-/* Used in fallback GTT:
- */
-static int I810GttType = 0;
-static unsigned long I810Physical = 0;
-static unsigned long I810GttSize = 0;
-static unsigned long I810GttPhysical = 0;
-static unsigned long I810ScratchPageLocal = 0;
 
+unsigned long I810TopOfMem = 0;
 
 /* Used to determine which watermarks to use:
  */
 int I810LmFreqSel = 0;
 
-
-/* Communications with the kernel module:
+/* Work out the real top of physical memory (not just what it says in
+ * /proc/meminfo).  Figure out the position and size of the
+ * preallocated (stolen) video ram segment.  For now, this is all the
+ * memory we will use.
  */
-static int    gartfd;
-static struct gart_info gartinf;
-static struct gart_pge_info gart_pg_inf;
-
-static int I810AllocateGARTMemory( void ) 
+Bool I810CharacterizeSystemRam( pciConfigPtr pcr )
 {
-   int size = 4 * 1024 * 1024;
-   int i, j, pages = size / 4096; 
-   struct stat sb;
-
-   /* We can only fallback if there is no agpgart module active -
-    * otherwise the fallback to system ram screws up the other gart
-    * client(s). 
+   pciTagRec tag = pcibusTag(pcr->_bus, pcr->_cardnum, pcr->_func);
+   unsigned long whtcfg_pamr_drp;
+   int pages = 4 * 1024 * 1024 / 4096; 
+
+   /* Communications with the kernel module:
     */
-   if (stat("/dev/agpgart", &sb) != 0) {
-      ErrorF("%s %s: Stat failed on /dev/agpgart: %s\n", 
-	     XCONFIG_PROBED, vga256InfoRec.name, 
-	     sys_errlist[errno]);
+   int gartfd;
+   agp_info agpinf;
+   agp_bind bind;
+   agp_allocate alloc;
+
+   /* Physical page reserved for hardware curcor. It is at the top of
+      the frame buffer. */
+   int hw_cursor_page;
 
-      /* Fallback - we'll manage the GTT ourselves.
-       */
-      return -1;
-   }
+   /* Need to do read longs, because read word returns rubbish...
+    */
+   whtcfg_pamr_drp = pciReadLong( tag, WHTCFG_PAMR_DRP );
+
+   /* Need this for choosing watermarks.
+    */
+   if ((whtcfg_pamr_drp & LM_FREQ_MASK) == LM_FREQ_133)
+      I810LmFreqSel = 133;
+   else
+      I810LmFreqSel = 100;
 
    gartfd = open("/dev/agpgart", O_RDWR);
    if (gartfd == -1) {	
       ErrorF("%s %s: unable to open /dev/agpgart: %s\n", 
-	     XCONFIG_PROBED, vga256InfoRec.name, 
+	     XCONFIG_PROBED, vga256InfoRec.name,
 	     sys_errlist[errno]);
       FatalError("Aborting");
    }
 
-   if (ioctl(gartfd, GARTIOCINFO, &gartinf) != 0) {
-      ErrorF("%s %s: error doing ioctl(GARTIOCINFO): %s\n", 
-	     XCONFIG_PROBED, vga256InfoRec.name, 
+   if (ioctl(gartfd, AGPIOC_ACQUIRE) != 0) {
+      ErrorF("%s %s: error doing ioctl(AGPIOC_ACQUIRE): %s\n", 
+	     XCONFIG_PROBED, vga256InfoRec.name,
 	     sys_errlist[errno]);
       FatalError("Aborting");
    }
 
+   if (ioctl(gartfd, AGPIOC_INFO, &agpinf) != 0) {
+      ErrorF("%s %s: error doing ioctl(AGPIOC_INFO): %s\n", 
+	     XCONFIG_PROBED, vga256InfoRec.name,
+	     sys_errlist[errno]);
+      FatalError("Aborting");
+   }
 
-   /* Dcache - half the speed of normal ram, so not really useful for
-    * a 2d server.  Don't bother reporting its presence.  
-    */
-   if (gartinf.num_dcache_slots) {
-      I810DcacheMem.Start = gartinf.num_of_slots * 4096;
-      I810DcacheMem.Size = gartinf.num_dcache_slots * 4096;
-      I810DcacheMem.End = I810DcacheMem.Start + I810DcacheMem.Size;
+   if (agpinf.version.major != 0 ||
+       agpinf.version.minor != 99) {
+      ErrorF("%s %s: Agp kernel driver version not correct\n", 
+	     XCONFIG_PROBED, vga256InfoRec.name);
+      FatalError("Aborting");
    }
-   
+
+   /* Reserve a page for hardware cursor. */
+   hw_cursor_page = OFLG_ISSET(OPTION_SW_CURSOR, &vga256InfoRec.options)
+   	? 0 : 1;
 
    /* Treat the gart like video memory - we assume we own all that is
     * there, so ignore EBUSY errors.  Don't try to remove it on
     * failure, either.
     */
-   for (i = 0; i < pages; i++) 
-      if (ioctl(gartfd, GARTIOCINSERT, &i) != 0) {
-	 if (errno != EBUSY) 
-	 {	
-	    perror("gart insert");
-	    ErrorF("%s %s: GART: allocation of %d pages failed at page %d\n", 
-		   XCONFIG_PROBED, vga256InfoRec.name, pages, i);
-	    FatalError("Aborting");
-	 }	
-      } 
+   alloc.pg_count = pages - hw_cursor_page;
+   alloc.type = 0;
 
-   ErrorF("%s %s: GART: allocated %dK system ram\n",
-	  XCONFIG_PROBED, vga256InfoRec.name, pages * 4);
-   
-   I810SysMem.Start = 0;
-   I810SysMem.End = pages * 4096;
-   I810SysMem.Size = pages * 4096;
-   I810GttType = gtt_Kernel;
-
-   vga256InfoRec.videoRam = I810SysMem.Size / 1024;
+   if (ioctl(gartfd, AGPIOC_ALLOCATE, &alloc) && errno != EBUSY) {
+      ErrorF("%s %s: GART: allocation of %d pages: %s\n", 
+	     XCONFIG_PROBED, vga256InfoRec.name, alloc.pg_count,
+	     sys_errlist[errno]);
+      FatalError("Aborting");
+   } 
 
-   return 0;
-}
+   bind.pg_start = I810TopOfMem / 4096;
+   bind.key = alloc.key;
+   if (ioctl(gartfd, AGPIOC_BIND, &bind) && errno != EBUSY) {
+      ErrorF("%s %s: GART: bind of %d pages: %s\n", 
+	     XCONFIG_PROBED, vga256InfoRec.name, alloc.pg_count,
+	     sys_errlist[errno]);
+      FatalError("Aborting");
+   }
 
+   I810SysMem.Start = I810TopOfMem;
+   I810SysMem.End = alloc.pg_count * 4096;
+   I810SysMem.Size = I810SysMem.End - I810SysMem.Start;
+   I810TopOfMem = I810SysMem.End;
 
-static void I810SetupFallbackGTT()
-{
-   unsigned int off, pte;
+   if (hw_cursor_page) {
+      /* Mouse cursor -- The i810 (crazy) needs a physical address in
+       * system memory from which to upload the cursor.  We get this
+       * from the agpgart module using a special memory type.
+       */
+      alloc.pg_count = hw_cursor_page;
+      alloc.type = 2;
 
-   OUTREG(PGETBL_CTL, (I810GttPhysical | PGETBL_ENABLED));
+      if (ioctl(gartfd, AGPIOC_ALLOCATE, &alloc) != 0) {
+	 ErrorF("%s %s: GART: allocation of %d pages for mouse: %s\n", 
+		XCONFIG_PROBED, vga256InfoRec.name, alloc.pg_count,
+		sys_errlist[errno]);
+      }
+      else {
+	 bind.pg_start = I810TopOfMem / 4096;
+	 bind.key = alloc.key;
+
+	 if (ioctl(gartfd, AGPIOC_BIND, &bind) != 0) {
+	    ErrorF("%s %s: GART: bind of %d pages for mouse: %s\n", 
+		   XCONFIG_PROBED, vga256InfoRec.name, alloc.pg_count,
+		   sys_errlist[errno]);
+	    ioctl(gartfd, AGPIOC_DEALLOCATE, &alloc);
+	 }
+	 else {
+	    I810CursorPhysical = alloc.physical;
+	    I810CursorStart = I810TopOfMem;
 
-   /* - load GTT entries via the MMIO aperture 
-    * - Use a dedicated scratch page.
-    */
-   for (off = 0, pte = 0 ; 
-	pte < (I810GttSize * 1024) ;
-	off += 4096, pte += 4) 
-   {
-      if (off < I810DcacheMem.End) {
-	 OUTREG_(PTE_BASE + pte, off | PTE_LOCAL | PTE_VALID);
-      } else if (off < I810SysMem.End) {
-	 OUTREG_(PTE_BASE + pte,
-		 (I810Physical + off - I810DcacheMem.End)
-		 | PTE_MAIN_UNCACHED | PTE_VALID);
-      } else {
-	 OUTREG_(PTE_BASE + pte,
-		 (I810Physical + I810ScratchPageLocal)
-		 | PTE_MAIN_UNCACHED | PTE_VALID);
+	    I810TopOfMem += alloc.pg_count * 4096;
+	 }
       }
    }
-}
 
-
-/* Work out the real top of physical memory (not just what it says in
- * /proc/meminfo).  Figure out the position and size of the
- * preallocated (stolen) video ram segment.  For now, this is all the
- * memory we will use.
- */
-Bool I810CharacterizeSystemRam( pciConfigPtr pcr )
-{
-   pciTagRec tag = pcibusTag(pcr->_bus, pcr->_cardnum, pcr->_func);
-   unsigned long mb = 0;
-   unsigned long foo;
-   unsigned long whtcfg_pamr_drp;
-   unsigned long smram_miscc;
-   int i;
-
-   /* Need to do read longs, because read word returns rubbish...
-    */
-   whtcfg_pamr_drp = pciReadLong( tag, WHTCFG_PAMR_DRP );
-   smram_miscc = pciReadLong( tag, SMRAM_MISCC );
-
-   /* Need this for choosing watermarks.
+   /* Dcache - half the speed of normal ram, so not really useful for
+    * a 2d server.  Don't bother reporting its presence.  This is
+    * mapped in addition to the requested amount of system ram.
     */
-   if ((whtcfg_pamr_drp & LM_FREQ_MASK) == LM_FREQ_133)
-      I810LmFreqSel = 133;
-   else
-      I810LmFreqSel = 100;
-
-
-   if (I810AllocateGARTMemory() == 0) 
-      return TRUE;
-   else if (getenv("I810_UNSUPPORTED_GTT_FALLBACK"))
-      ErrorF("%s %s: No kernel GTT support detected - trying to fall back\n",
-	     XCONFIG_PROBED, vga256InfoRec.name);
-   else
-      FatalError("Couldn't get memory from gart module,\n"
-		 "and I810_UNSUPPORTED_GTT_FALLBACK not set.");
-
+   alloc.pg_count = 1024;
+   alloc.type = 1;
 
-   /* Fallback is useful for debugging, or if someone is unable to
-    * compile the kernel module (eg. a 1.2.x kernel, or a non-linux
-    * operating system).  However there are real drawbacks - there has
-    * been little thought given to synchronization between two X
-    * servers running on the same hardware, non-X users of the gart
-    * (eg svga, fbdev, ggi), and when direct-rendering 3d clients
-    * become available the same problems will arise there, too.
-    *
-    * Additionally, the X server is unable to allocate system memory,
-    * so must cram everything into whatever 'stolen' memory was
-    * reserved by the chipset at startup.  This is sneaky - the memory
-    * isn't guarenteed to be present, and is not guarenteed to be
-    * stable, either.
-    *
-    * Thus this should never be considered anything but a stopgap
-    * measure, or tool for special circumstances where a kernel module
-    * is unavailable.  
+   /* Keep it 512K aligned for the sake of tiled regions.
     */
-   if ((smram_miscc & GFX_MEM_WIN_SIZE) == GFX_MEM_WIN_32M) 
-      I810GttSize = 32;
-   else
-      I810GttSize = 64;
+   I810TopOfMem += 0x7ffff;
+   I810TopOfMem &= ~0x7ffff;
 
-   ErrorF("%s %s: GTT window size: %ld mb\n", 
-	  XCONFIG_PROBED, vga256InfoRec.name, I810GttSize);
-   
-   for ( i = 0 ; i < 2 ; i++ ) {
-      char drp;
-      int row = 0;
-
-      switch (i) {
-      case 0: drp = whtcfg_pamr_drp >> SYS_DRAM_ROW_0_SHIFT; break;
-      case 1: drp = whtcfg_pamr_drp >> SYS_DRAM_ROW_1_SHIFT; break;
+   if (ioctl(gartfd, AGPIOC_ALLOCATE, &alloc) != 0) {
+      ErrorF("%s %s: GART: %d pages for DCACHE: %s\n", 
+		XCONFIG_PROBED, vga256InfoRec.name, alloc.pg_count,
+		sys_errlist[errno]);
+   }
+   else {
+      bind.pg_start = I810TopOfMem / 4096;
+      bind.key = alloc.key;
+
+      if (ioctl(gartfd, AGPIOC_BIND, &bind) != 0) {
+	 ErrorF("%s %s: GART: bind of %d pages for DCACHE: %s\n", 
+		XCONFIG_PROBED, vga256InfoRec.name, alloc.pg_count,
+		sys_errlist[errno]);
+	 ioctl(gartfd, AGPIOC_DEALLOCATE, &alloc);
       }
-
-      switch (drp & DRAM_MASK) {
-      case 0x0: row = DRAM_VALUE_0; break;
-      case 0x1: row = DRAM_VALUE_1; break;
-	 /* no 0x2 value defined  */
-      case 0x3: row = DRAM_VALUE_3; break;
-      case 0x4: row = DRAM_VALUE_4; break;
-      case 0x5: row = DRAM_VALUE_5; break;
-      case 0x6: row = DRAM_VALUE_6; break;
-      case 0x7: row = DRAM_VALUE_7; break;
-      case 0x8: row = DRAM_VALUE_8; break;
-      case 0x9: row = DRAM_VALUE_9; break;
-      case 0xa: row = DRAM_VALUE_A; break;
-      case 0xb: row = DRAM_VALUE_B; break;
-      case 0xc: row = DRAM_VALUE_C; break;
-      case 0xd: row = DRAM_VALUE_D; break;
-      case 0xe: row = DRAM_VALUE_E; break;
-      case 0xf: row = DRAM_VALUE_F; break;
-      default:
-	 FatalError("%s %s: Unrecognized system dram row size\n",
-		    XCONFIG_PROBED, vga256InfoRec.name);
-	 break;
+      else {
+	 I810DcacheMem.Start = I810TopOfMem;
+	 I810DcacheMem.Size = alloc.pg_count * 4096;
+	 I810DcacheMem.End = I810DcacheMem.Start + I810DcacheMem.Size;
+	 I810TopOfMem = I810DcacheMem.End;
       }
-
-      mb += row;
-
-      ErrorF("%s %s: System dram row %d, size %d mb\n", 
-	     XCONFIG_PROBED, vga256InfoRec.name, i, row );
-   }
-
-   ErrorF("%s %s: Installed mainboard ram: %d mb\n", 
-	  XCONFIG_PROBED, vga256InfoRec.name, mb);
-
-   mb *= 1024*1024;
-
-   /* Take into account memory reserved for TSEG, whatever that is.
-    */
-   switch (smram_miscc & USMM) {
-   case USMM_TSEG_512K: mb -= 512 * 1024; break;
-   case USMM_TSEG_1M: mb -= 1024 * 1024; break;
-   default: break;
-   }
-
-   switch (smram_miscc & GMS) {
-   case GMS_DISABLE: 
-      ErrorF("i810 is disabled\n");
-      return 0;
-   case GMS_ENABLE_BARE:
-      ErrorF("\nNo system ram reserved for i810, and no kernel GTT\n");
-      return 0;
-   case GMS_ENABLE_512K:
-      I810SysMem.End = 512 * 1024;
-      I810Physical = mb - 512 * 1024;
-      ErrorF("%s %s: Only 512k system ram available for i810\n",
-	     XCONFIG_PROBED, vga256InfoRec.name);
-      break;
-   case GMS_ENABLE_1M:
-      I810SysMem.End = 1024 * 1024;
-      I810Physical = mb - 1024 * 1024;
-      ErrorF("%s %s: Only 1024k system ram available for i810\n",
-	     XCONFIG_PROBED, vga256InfoRec.name);
-      break;
    }
 
-   /* Reserve space for the GTT and scratch page.
-    */
-   I810SysMem.End -= I810GttSize * 1024;
-   I810GttPhysical = I810Physical + I810SysMem.End;
-   I810SysMem.End -= 4096;
-   I810ScratchPageLocal = I810SysMem.End;
-   I810SysMem.Size = I810SysMem.End - I810SysMem.Start;
-
-
-   /* Breifly map IO registers to virtual address space. */
-   I810MMIOBase = xf86MapVidMem(vga256InfoRec.scrnIndex, MMIO_REGION,
-				(pointer)(I810MMIOAddr), 0x80000);
-
-   if (!I810MMIOBase) 
-      FatalError("Couldn't map MMIO region");
-
-   /* Dcache is too slow for normal use, but it's a way to get a
-    * fullsized framebuffer in the fallback mode.  
-    */
-   if ((INREG8(DRAM_ROW_TYPE) & DRAM_ROW_0) == DRAM_ROW_0_SDRAM)
-   {
-      ErrorF("%s %s: Detected 4MB dedicated video ram\n",
-	     XCONFIG_PROBED, vga256InfoRec.name);
-
-      I810DcacheMem.Start = 0;
-      I810DcacheMem.End = 4 * 1024 * 1024;
-      I810DcacheMem.Size = I810DcacheMem.End;      
-      I810SysMem.Start += I810DcacheMem.Size;
-      I810SysMem.End += I810DcacheMem.Size;	       
-      I810DisplayPtr = &I810DcacheMem;
+   if (ioctl(gartfd, AGPIOC_RELEASE) != 0) {
+      ErrorF("%s %s: error doing ioctl(AGPIOC_RELEASE): %s\n", 
+	     XCONFIG_PROBED, vga256InfoRec.name,
+	     sys_errlist[errno]);
    }
 
-   vga256InfoRec.videoRam = (I810SysMem.End - I810DcacheMem.Start) / 1024;
-   I810GttType = gtt_Local;
+   ErrorF("%s %s: GART: allocated %dK system ram\n",
+	  XCONFIG_PROBED, vga256InfoRec.name, pages * 4);
    
-   I810SetupFallbackGTT();
+   vga256InfoRec.videoRam = (pages * 4096) / 1024;
 
-   /* Unmap them again. */
-   xf86UnMapVidMem(vga256InfoRec.scrnIndex, MMIO_REGION,
-		   (pointer)(I810MMIOAddr), 0x80000);
    return TRUE;
-}
-
-
-unsigned long I810LocalToPhysical( unsigned long local )
-{
-   switch (I810GttType) {
-   case gtt_Local:
-      if (I810DisplayPtr == &I810SysMem)
-	 return I810Physical + local;
-      else
-	 return I810Physical + local - 4 * 1024 * 1024;
-      break;
-   case gtt_Kernel:
-      gart_pg_inf.index = (local + 4095) / 4096;
-      if (ioctl(gartfd, GARTIOCPGINFO, &gart_pg_inf) != 0) {
-	 ErrorF("%s %s: error doing ioctl(GARTIOCINFO, %x): %s\n", 
-		XCONFIG_PROBED, vga256InfoRec.name, gart_pg_inf.index,
-		sys_errlist[errno]);
-	 return 0;
-      }
-      return gart_pg_inf.physical + (local & 4095);
-   default:
-      return 0;
-   }
 }
 
 int I810AllocLow( I810MemRange *result, I810MemRange *pool, int size )
--- XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810_driver.c.810	Thu Nov 18 11:22:48 1999
+++ XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810_driver.c	Wed Mar 15 08:36:05 2000
@@ -126,6 +126,7 @@ int I810LinearAddr = 0;
 int I810MMIOAddr = 0;
 
 unsigned long I810CursorPhysical = 0;
+unsigned long I810CursorStart = 0;
 int I810CursorOffset = 0;
 
 I810RingBuffer I810LpRing;
@@ -196,13 +197,13 @@ vgaVideoChipRec I810 = {
     (void (*)())NoopDDA,	/* I810SetWrite, */
     (void (*)())NoopDDA,	/* I810SetReadWrite, */
 
-    0x10000,			/* banked mode stuff */
-    0x10000,			/*  */
-    16,				/*  */
-    0xFFFF,			/*  */
-    0x00000, 0x10000,		/*  */
-    0x00000, 0x10000,		/*  */
-    FALSE,			/* banked mode stuff */
+    0x10000,			/* ChipMapSize */
+    0x10000,			/* ChipSegmentSize */
+    16,				/* ChipSegmentShift */
+    0xFFFF,			/* ChipSegmentMask */
+    0x00000, 0x10000,		/* ChipReadBottom, ChipReadTop */
+    0x00000, 0x10000,		/* ChipUse2Banks, ChipWriteTop */
+    FALSE,			/* ChipUse2Banks */
     VGA_NO_DIVIDE_VERT,
     {0,},
     8,				/* scanline padding - replace pitchadjust? */
@@ -1304,7 +1305,7 @@ I810FbInit()
    /* Allocate the framebuffer.
     */
    if (!I810AllocLow( &I810FrameBuffer, 
-		      I810DisplayPtr,
+		      &I810SysMem,
 		      (vga256InfoRec.virtualY *
 		       vga256InfoRec.displayWidth *
 		       vgaBytesPerPixel) ))
@@ -1318,26 +1319,15 @@ I810FbInit()
 
    if (!OFLG_ISSET(OPTION_SW_CURSOR, &vga256InfoRec.options)) 
    {
-      if (!I810AllocHigh( &I810Cursor, &I810SysMem, 4096 )) {
-	 ErrorF("%s %s: %s: Warning: "
-		"Cannot allocate memory in framebuffer for cursor image\n",
-		(OFLG_ISSET(OPTION_HW_CURSOR, &vga256InfoRec.options) ?
-		 XCONFIG_GIVEN : XCONFIG_PROBED),
-		vga256InfoRec.name,
-		vga256InfoRec.chipset);
-      }
-      else {
-	 /* Translate to a physical system memory address - this is the
-	  * only thing for which the hardware will not use the GTT...  
-	  */
-	 I810CursorPhysical = I810LocalToPhysical( I810Cursor.Start ); 
-
-	 if (I810_DEBUG & DEBUG_VERBOSE_MEMORY)
-	    fprintf(stderr, "cursor local %x phys %x\n", 
-		    I810Cursor.Start, I810CursorPhysical);
-
-	 if (I810CursorPhysical) 
-	    I810CursorInit(); 
+      if (I810_DEBUG & DEBUG_VERBOSE_MEMORY)
+	 fprintf(stderr, "cursor local %x phys %x\n", 
+		 I810CursorStart, I810CursorPhysical);
+
+      if (I810CursorPhysical)  {
+	 I810Cursor.Start = I810CursorStart;
+	 I810Cursor.Size = 4096;
+	 I810Cursor.End = I810Cursor.Start + I810Cursor.Size;
+	 I810CursorInit(); 
       }
    }
 
--- XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810.h.810	Thu Nov 18 11:22:47 1999
+++ XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810.h	Tue Mar 14 23:08:19 2000
@@ -47,6 +47,7 @@ extern Bool           I810CharacterizeSy
 /* Globals */
 extern unsigned char *I810MMIOBase;
 extern unsigned long  I810CursorPhysical;
+extern unsigned long  I810CursorStart;
 extern int            I810CursorOffset;
 extern int            I810Chipset;
 
@@ -61,8 +62,6 @@ typedef struct {
 
 extern int I810AllocHigh( I810MemRange *result, I810MemRange *pool, int size );
 extern int I810AllocLow( I810MemRange *result, I810MemRange *pool, int size );
-extern unsigned long I810LocalToPhysical( unsigned long local );
-
 /* 
  */
 typedef struct {
@@ -80,7 +79,7 @@ extern I810RingBuffer I810LpRing;
 extern int I810FrameBufferLocked;
 extern int I810LmFreqSel;
 
-extern I810MemRange I810SysMem, I810DcacheMem, *I810DisplayPtr;
+extern I810MemRange I810SysMem, I810DcacheMem;
 extern I810MemRange I810Mprotect;
 extern I810MemRange I810Cursor;
 
--- XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810_wmark.c.810	Thu Nov 18 11:22:48 1999
+++ XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810_wmark.c	Tue Mar 14 23:08:19 2000
@@ -320,19 +320,5 @@ unsigned int I810CalcWatermark( double f
    ErrorF("%s %s: chose watermark 0x%x: (tab.freq %.1f)\n",
 	  XCONFIG_PROBED, vga256InfoRec.name, tab[i].wm, tab[i].freq);
 
-   /* None of these values (sourced from intel) have watermarks for
-    * the dcache memory.  Fake it for now by using the same watermark
-    * for both...  
-    *
-    * Update: this is probably because dcache isn't real useful as
-    * framebuffer memory, so intel's drivers don't need watermarks
-    * for that memory because they never use it to feed the ramdacs.
-    * We do use it in the fallback mode, so keep the watermarks for
-    * now.
-    */
-   if (I810DisplayPtr == &I810DcacheMem)
-      return (tab[i].wm & ~0xffffff) | ((tab[i].wm>>12) & 0xfff);
-   else
-      return tab[i].wm;
+   return tab[i].wm;
 }
-
--- XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810_accel.c.810	Thu Nov 18 11:22:48 1999
+++ XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/vga256/drivers/i810/i810_accel.c	Tue Mar 14 23:08:19 2000
@@ -257,7 +257,7 @@ I810AccelInit() 
     if (pix_cache.Size > I810SysMem.Size)
        pix_cache.Size = I810SysMem.Size;
     
-    if (I810AllocLow( &pix_cache, I810DisplayPtr, pix_cache.Size ))
+    if (I810AllocLow( &pix_cache, &I810SysMem, pix_cache.Size ))
     {
        xf86AccelInfoRec.PixmapCacheMemoryStart = pix_cache.Start;
        xf86AccelInfoRec.PixmapCacheMemoryEnd = pix_cache.End;
--- XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/xf86config/Cards.810	Tue Mar 14 23:08:19 2000
+++ XFree86-3.3.6/xc/programs/Xserver/hw/xfree86/xf86config/Cards	Tue Mar 14 23:08:19 2000
@@ -3093,6 +3093,11 @@ SEE Intel 740 (generic)
 NAME Winfast S900 i740 AGP 8MB
 SEE Intel 740 (generic)
 
+NAME Intel 810
+CHIPSET Intel 810
+SERVER SVGA
+NOCLOCKPROBE
+
 NAME Voodoo Banshee (generic)
 CHIPSET Voodoo Banshee
 SERVER SVGA
